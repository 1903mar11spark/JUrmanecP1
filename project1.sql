
-- start of creation script for poject1 -- 

-- drop tables -- 
DROP TABLE EMPTYPE;
DROP TABLE LOGINCREDS;
DROP TABLE REQSTATE; 
DROP TABLE REQUEST; 
DROP TABLE EMPLOYEE; 
 
-- table creation -- 
CREATE TABLE EMPLOYEE (
EMPLOYEEID INTEGER PRIMARY KEY, 
FIRSTNAME VARCHAR2(100), 
LASTNAME VARCHAR2(100), 
TITLE VARCHAR2(100), 
REPORTSTO INTEGER, 
EMAILADDRESS VARCHAR2(100), 
EMPTYPEID INTEGER
); 
/
ALTER TABLE EMPLOYEE
ADD LOGINCREDSID INTEGER;

ALTER TABLE EMPLOYEE RENAME COLUMN EMAILADDRESS TO EMAIL; 


CREATE TABLE LOGINCREDS (
LOGINCREDSID INTEGER PRIMARY KEY, 
UNAME VARCHAR2(100),
PWORD VARCHAR2(100), 
EMPLOYEEID INTEGER
); 
/
ALTER TABLE LOGINCREDS 
DROP COLUMN EMPLOYEEID;


CREATE TABLE EMPTYPE (
EMPTYPEID INTEGER PRIMARY KEY, 
EMPTYPENAME INTEGER
); 
/
ALTER TABLE EMPTYPE
MODIFY  EMPTYPENAME VARCHAR2(100); 

CREATE TABLE REQUEST (
REQUESTID INTEGER PRIMARY KEY, 
COST DOUBLE PRECISION, 
DESCRIPTION  VARCHAR2(100),
RECEIPTIMAGE  VARCHAR2(100), --thi type will need to be updated
REQSTATEID INTEGER,
EMPLOYEEID INTEGER
); 
/

ALTER TABLE REQUEST 
ADD MANAGERID INTEGER;


CREATE TABLE REQSTATE (
REQSTATEID INTEGER PRIMARY KEY, 
REQSTATENAME VARCHAR2(100)
); 
/

--ALTER TABLE EMPTYPE
--ADD CONSTRAINT FK_EMPTYPE_EMPLOYEE    --FK_USR_USR_TYPE
--FOREIGN KEY(EMPLOYEEID) REFERENCES EMPLOYEE(EMPLOYEEID);  -- FOREIGN KEY(USR_TYPE_ID) REFERENCES USR_TYPE(USR_TYPE_ID); 

--ALTER TABLE EMPLOYEE
--ADD CONSTRAINT FK_EMPLOYEE_LOGINCREDS  
--FOREIGN KEY(LOGINCREDSID) REFERENCES LOGINCREDS(LOGINCREDSID);

ALTER TABLE REQUEST
ADD CONSTRAINT FK_REQUEST_EMPLOYEE    
FOREIGN KEY(EMPLOYEEID) REFERENCES EMPLOYEE(EMPLOYEEID);

ALTER TABLE REQUEST
ADD CONSTRAINT FK_REQUEST_REQSTATE    
FOREIGN KEY(REQSTATEID) REFERENCES REQSTATE(REQSTATEID);

ALTER TABLE EMPLOYEE
ADD CONSTRAINT FK_EMPLOYEE_LOGINCREDS    
FOREIGN KEY(LOGINCREDSID) REFERENCES LOGINCREDS(LOGINCREDSID);


-- inserting some data for the 'type'/'states' -- 

INSERT INTO REQSTATE VALUES (1, 'pending'); 
INSERT INTO REQSTATE VALUES (2, 'approved');
INSERT INTO REQSTATE VALUES (3, 'denied');

INSERT INTO EMPTYPE VALUES (1, 'non-managers'); 
INSERT INTO EMPTYPE VALUES (2, 'managers');

-- inserting some people -- 

INSERT INTO LOGINCREDS VALUES (1, 'SSmith', 'secret'); 
INSERT INTO LOGINCREDS VALUES (2, 'JJones', 'juniper'); 
INSERT INTO LOGINCREDS VALUES (3, 'MManning', 'marzipan');
INSERT INTO LOGINCREDS VALUES (4, 'FFlower', 'fanciful');
INSERT INTO LOGINCREDS VALUES (5, 'AAdler', 'antelope');

INSERT INTO EMPLOYEE VALUES (1, 'Steve', 'Smith', 'entry-level',3,'SSmith@futuretech.com', 1, 1); 
INSERT INTO EMPLOYEE VALUES (2, 'Jesse', 'Jones', 'entry-level',3,'JJones@futuretech.com', 1, 2); 
INSERT INTO EMPLOYEE VALUES (3, 'Marry', 'Manning', 'entry-level',3,'MManning@futuretech.com', 1, 3);
INSERT INTO EMPLOYEE VALUES (4, 'Francis', 'Flower', 'junior associate',5,'FFlower@futuretech.com', 2, 4);
INSERT INTO EMPLOYEE VALUES (5, 'Adam', 'Alder', 'executive director',null,'AAlder@futuretech.com', 2, 5);



UPDATE EMPLOYEE SET REPORTSTO = 4 WHERE EMPLOYEEID = 1; 
UPDATE EMPLOYEE SET REPORTSTO = 4 WHERE EMPLOYEEID = 2; 
UPDATE EMPLOYEE SET REPORTSTO = 4 WHERE EMPLOYEEID = 3;


-- inserting some login credentials -- 



UPDATE EMPLOYEE SET LOGINCREDSID = 1 WHERE EMPLOYEEID = 1; 
UPDATE EMPLOYEE SET LOGINCREDSID = 2 WHERE EMPLOYEEID = 2; 
UPDATE EMPLOYEE SET LOGINCREDSID = 3 WHERE EMPLOYEEID = 3;
UPDATE EMPLOYEE SET LOGINCREDSID = 4 WHERE EMPLOYEEID = 4; 
UPDATE EMPLOYEE SET LOGINCREDSID = 5 WHERE EMPLOYEEID = 5; 

-- sequences and triggers 
DROP SEQUENCE SQ_REQUEST_PK; 

CREATE SEQUENCE SQ_REQUEST_PK
START WITH 2
INCREMENT BY 1; 
/ 

CREATE OR REPLACE TRIGGER TR_INSERT_REQUEST
BEFORE INSERT ON REQUEST
FOR EACH ROW 
BEGIN 
    SELECT SQ_REQUEST_PK.NEXTVAL INTO: NEW.REQUESTID FROM  DUAL; 
END; 
/ 

-- start of project1 logic -- 

-- logic for employee login -- 

SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, E.EMAIL, 
L.LOGINCREDSID, L.UNAME, L.PWORD, ET.EMPTYPEID, ET.EMPTYPENAME
FROM EMPLOYEE E 
INNER JOIN LOGINCREDS L 
ON E.LOGINCREDSID = L.LOGINCREDSID 
INNER JOIN EMPTYPE ET 
ON E.EMPTYPEID = ET.EMPTYPEID; 

SELECT LOGINCREDSID
FROM LOGINCREDS L 
WHERE (L.UNAME = 'SSmith' AND L.PWORD = 'secret');  


SELECT L.LOGINCREDSID
FROM L 
WHERE (L.UNAME = 'SSmith' AND L.PWORD = 'secret'); 

SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, E.EMAIL, 
L.LOGINCREDSID, L.UNAME, L.PWORD, ET.EMPTYPEID, ET.EMPTYPENAME
FROM EMPLOYEE E 
INNER JOIN LOGINCREDS L 
ON E.LOGINCREDSID = L.LOGINCREDSID 
INNER JOIN EMPTYPE ET 
ON E.EMPTYPEID = ET.EMPTYPEID 
WHERE (L.UNAME = 'SSmith' AND L.PWORD = 'secret'); 

SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, E.EMAIL, 
L.LOGINCREDSID, L.UNAME, L.PWORD, ET.EMPTYPEID, ET.EMPTYPENAME
FROM EMPLOYEE E 
INNER JOIN LOGINCREDS L 
ON E.LOGINCREDSID = L.LOGINCREDSID 
INNER JOIN EMPTYPE ET 
ON E.EMPTYPEID = ET.EMPTYPEID 
WHERE (L.UNAME = 'SSmith' AND L.PWORD = 'secret'); 

SELECT E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, R.FIRSTNAME, R.LASTNAME, R.TITLE
FROM EMPLOYEE E 
LEFT JOIN EMPLOYEE R
ON E.REPORTSTO = R.EMPLOYEEID; 

-- below is the query used to intantiate employees by username and password -- 

SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.EMAIL, 
L.LOGINCREDSID, L.UNAME, L.PWORD, ET.EMPTYPEID, ET.EMPTYPENAME, E.REPORTSTO, (R.FIRSTNAME||' '||R.LASTNAME) AS MANAGER, 
R.TITLE AS MANAGER_TITLE
FROM EMPLOYEE E 
INNER JOIN LOGINCREDS L 
ON E.LOGINCREDSID = L.LOGINCREDSID 
LEFT JOIN EMPLOYEE R
ON E.REPORTSTO = R.EMPLOYEEID
INNER JOIN EMPTYPE ET 
ON E.EMPTYPEID = ET.EMPTYPEID 
WHERE (L.UNAME = 'SSmith' AND L.PWORD = 'secret'); 

-- logic for pulling an employee by id from the DB 

SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.EMAIL, 
L.LOGINCREDSID, L.UNAME, L.PWORD, ET.EMPTYPEID, ET.EMPTYPENAME, E.REPORTSTO, (R.FIRSTNAME||' '||R.LASTNAME) AS MANAGER, 
R.TITLE AS MANAGER_TITLE
FROM EMPLOYEE E 
INNER JOIN LOGINCREDS L 
ON E.LOGINCREDSID = L.LOGINCREDSID 
LEFT JOIN EMPLOYEE R
ON E.REPORTSTO = R.EMPLOYEEID
INNER JOIN EMPTYPE ET 
ON E.EMPTYPEID = ET.EMPTYPEID 
WHERE E.EMPLOYEEID = 4; 


-- 
 
/*
INTERSECT 
SELECT E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, R.FIRSTNAME, R.LASTNAME, R.TITLE
FROM EMPLOYEE E 
LEFT JOIN EMPLOYEE R
ON E.REPORTSTO = R.EMPLOYEEID; 
*/

-- logic for generating requests --

-- general statements 
-- insert all fields 
INSERT INTO table_name
VALUES (value1, value2, value3, ...);

-- insert some fields 
INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...);

-- update a field 
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

-- delete a record 
DELETE FROM table_name WHERE condition;

-- for project 
-- 
INSERT INTO REQUEST 
VALUES (1, 25, 'lunch with client', 'image',1,1,4); 

INSERT INTO REQUEST(COST, DESCRIPTION, RECEIPTIMAGE, REQSTATEID, EMPLOYEEID, MANAGERID) 
VALUES (25,'gas reimbursement', 'image', 1, 2, 4);


INSERT INTO REQUEST(COST, DESCRIPTION, RECEIPTIMAGE, REQSTATEID, EMPLOYEEID, MANAGERID) 
VALUES (25,'gas reimbursement', 'image', 1, 2, 4); 
COMMIT; 

-- logic to view all pending requests -- 

SELECT R.REQUESTID, R.COST, R.DESCRIPTION, R.RECEIPTIMAGE, RS.REQSTATENAME AS "REQUEST STATUS", 
(E.FIRSTNAME||' '||E.LASTNAME) AS "SUBMITTED BY", (M.FIRSTNAME||' '||M.LASTNAME) AS "SUBMITTED TO", M.EMPLOYEEID AS MANAGERID
FROM REQUEST R 
INNER JOIN REQSTATE RS
ON R.REQSTATEID = RS.REQSTATEID 
INNER JOIN EMPLOYEE E 
ON E.EMPLOYEEID = R.EMPLOYEEID 
INNER JOIN EMPLOYEE M
ON E.REPORTSTO = M.EMPLOYEEID
WHERE (R.EMPLOYEEID = 2 AND R.REQSTATEID = 1); 

-- for managers -- 
-- view all requests to the manager -- 

SELECT R.REQUESTID, E.EMPLOYEEID, R.COST, R.DESCRIPTION, R.RECEIPTIMAGE, RS.REQSTATENAME AS "REQUEST STATUS", 
(E.FIRSTNAME||' '||E.LASTNAME) AS "SUBMITTED BY", (M.FIRSTNAME||' '||M.LASTNAME) AS "SUBMITTED TO", M.EMPLOYEEID AS MANAGERID
FROM REQUEST R 
INNER JOIN REQSTATE RS
ON R.REQSTATEID = RS.REQSTATEID 
INNER JOIN EMPLOYEE E 
ON E.EMPLOYEEID = R.EMPLOYEEID 
INNER JOIN EMPLOYEE M
ON E.REPORTSTO = M.EMPLOYEEID
WHERE (R.MANAGERID = 4 AND R.REQSTATEID = 1); 

-- view all request to a manager by a single employee

SELECT R.REQUESTID, E.EMPLOYEEID, R.COST, R.DESCRIPTION, R.RECEIPTIMAGE, RS.REQSTATENAME AS "REQUEST STATUS", 
(E.FIRSTNAME||' '||E.LASTNAME) AS "SUBMITTED BY", (M.FIRSTNAME||' '||M.LASTNAME) AS "SUBMITTED TO", M.EMPLOYEEID AS MANAGERID
FROM REQUEST R 
INNER JOIN REQSTATE RS
ON R.REQSTATEID = RS.REQSTATEID 
INNER JOIN EMPLOYEE E 
ON E.EMPLOYEEID = R.EMPLOYEEID 
INNER JOIN EMPLOYEE M
ON E.REPORTSTO = M.EMPLOYEEID
WHERE (R.MANAGERID = 4 AND R.REQSTATEID = 1 AND E.EMPLOYEEID = 2); 

-- update (approve or deny) a request 
-- approve 
UPDATE REQUEST 
SET REQSTATEID = 2
WHERE REQUESTID = 7; 

-- deny
UPDATE REQUEST 
SET REQSTATEID = 3
WHERE REQUESTID = 4; 

-- view all resolved requests from all employees and see the managers who resolved them. 

SELECT R.REQUESTID, E.EMPLOYEEID, R.COST, R.DESCRIPTION, R.RECEIPTIMAGE, RS.REQSTATENAME, RS.REQSTATEID,
(E.FIRSTNAME||' '||E.LASTNAME) AS "SUBMITTED BY", (M.FIRSTNAME||' '||M.LASTNAME) AS "SUBMITTED TO", M.EMPLOYEEID AS MANAGERID
FROM REQUEST R 
INNER JOIN REQSTATE RS
ON R.REQSTATEID = RS.REQSTATEID 
INNER JOIN EMPLOYEE E 
ON E.EMPLOYEEID = R.EMPLOYEEID 
INNER JOIN EMPLOYEE M
ON E.REPORTSTO = M.EMPLOYEEID
WHERE (RS.REQSTATEID = 2 OR RS.REQSTATEID = 3); 

-- logic for managers to view all employees and their managers -- 
SELECT E.EMPLOYEEID, E.FIRSTNAME, E.LASTNAME, E.TITLE, E.REPORTSTO, E.EMAIL, ET.EMPTYPEID, ET.EMPTYPENAME, 
L.LOGINCREDSID, L.UNAME, L.PWORD, 
R.EMPLOYEEID AS MANAGERID, R.FIRSTNAME AS MFIRSTNAME, R.LASTNAME AS MLASTNAME, R.TITLE AS MTITLE, R.REPORTSTO AS MREPORTSTO,
R.EMAIL AS MEMAIL, R.EMPTYPEID AS MEMPTYPEID, R.LOGINCREDSID AS MLOGINCREDSID,
RET.EMPTYPEID AS MEMPTYPEID, RET.EMPTYPENAME AS MEMPTYPENAME, 
RL.LOGINCREDSID AS MLOGINCREDSID, RL.UNAME AS MUNAME, RL.PWORD AS MPWORD

FROM EMPLOYEE E 
LEFT JOIN EMPLOYEE R
ON R.EMPLOYEEID = E.REPORTSTO
LEFT JOIN EMPTYPE ET
ON E.EMPTYPEID = ET.EMPTYPEID
LEFT JOIN LOGINCREDS L 
ON L.LOGINCREDSID = E.LOGINCREDSID 
LEFT JOIN EMPTYPE RET 
ON R.EMPTYPEID = RET.EMPTYPEID
LEFT JOIN LOGINCREDS RL 
ON RL.LOGINCREDSID = R.LOGINCREDSID; 

-- 


-- logic for updating employee recrods 
UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;

UPDATE EMPLOYEE 
SET FIRSTNAME = 'Sam'
WHERE EMPLOYEEID = 1; 

-- fixing things - - - 

UPDATE REQUEST
SET REQSTATEID = 1
WHERE REQUESTID = 1; 

UPDATE REQUEST
SET REQSTATEID = 1
WHERE REQUESTID = 52; 

UPDATE EMPLOYEE SET FIRSTNAME = 'John' 
WHERE EMPLOYEEID = 2;

UPDATE EMPLOYEE SET FIRSTNAME = 'James'
WHERE EMPLOYEEID = 2; 

UPDATE EMPLOYEE SET EMAIL = 'JJenson@futuretech.com'
WHERE EMPLOYEEID = 2; 

DELETE FROM EMPLOYEE WHERE EMPLOYEEID=2;
DELETE FROM REQUEST WHERE EMPLOYEEID=2;

DELETE FROM LOGINCREDS WHERE LOGINCREDSID=2; 

DELETE FROM REQUESTS WHERE EMPLOYEEID=2; 
